-- setup.scd --

set database.library struct(
	type db
)

-- db.scd --

context database.library

set table.book struct(
	type db.table
	tags list(softdelete, audit)
	columns table(
		name      | type                    | default 
		id        | key(int)                | serial 
		name      | text(1000)              |
		pages     | int                     |
		genre     | fk(int, table.genre.id) |
		published | bool                    | false
	)
)

set table.book.author struct (
	type db.table
	columns table (
		name       | type       | default
		id         | key(int)   | serial
		book       | fk(int, table.book)
		first_name | text       | ""
		last_name  | text       | ""
		sort_order | int        | 0
	)
)

set table.book.indices table (
    name       |  index        | include | where
    pagelength |  pages, genre | id      | eq(deleted, 0)
    genre      |  genre        | id      | eq(deleted, 0)
)

var table.books.query.all query(
	from books b
	from genre g
	and contains(b.name, .name)
	select b.name, g.name genre_name
)

set table.genre struct(
	tags list(softdelete, audit)
	columns table(
		name   | type       | default
		id     | key(int)   | serial
		name   | text(1000) |  -
	)
)

set tags.softdelete.columns table(
    name    | type | default
    deleted | bool | false
)

set tags.softdelete.columns table(
    name    | type | default
    deleted | bool | false
)

set tags.softdelete.queries table(
    name              | query
    softdelete_filter | or(and(.show_deleted, eq(.show_deleted, true)), eq(deleted, false))
)
set tags.softdelete.triggers table(
    name                    | on     | do
    audit_softdelete_delete | delete | query(cancel delete; update; set deleted 1)
)

set tags.audit.columns table(
    name              | type       | default
    time_created      | datetimez  | time.now()
    account_created   | int        | or(@account, 0)
    time_updated      | datetimez  | time.now()
    account_updated   | int        | or(@account, 0)
)

set tags.audit.triggers table(
    name         | on     | do
    audit_update | update | query(update; set time_updated time.now(); set account_updated or(@account, 0))
)

set tags.audit+softdelete.columns table(
    name            | type      | default | nullable
    time_deleted    | datetimez | -       | nullable
    account_deleted | int       | -       | nullable
)

set tags. audit + softdelete .triggers table(
    name                    | on     | do
    audit_softdelete_delete | delete | query(update; set time_deleted time.now(); set account_deleted or(@account, 0))
)

// TODO(daniel.theophanes): Add ability to add history "sub-tables".
// Functionally this would entail a table having a related sub-table.
// This might be in the form of an audit table (showing history and effective date).
// This might be in the form of a view that always takes an effective date, and the sub-table holds the data.

-- portal_public.scd --

// Permissions:
//  D: Delete
//  U: Update
//  I: Insert
//  S: Select

context database.library.portal.public

set roles table(
    name | level
    anon | 1
)

// Specify what columns may be read, and what where clauses must be used when selecting rows.
set table.books.require table(
    role | permission | query
    anon | S          | and eq(b.published, true)
)

set table.books.columns table(
    role | column     | permission | where
    anon | id         | S          | -
    anon | name       | S          |
    anon | pagelength | S          |
)

set table.genre.require table(
    role | permission | query
    anon | S          | and query(from books b; and eq(b.genre, g.id)) // Ensure at least one (published) book has the genre.
)

set table.genre.columns table (
    role | column | permission | query
    anon | name   | S          | -
)

-- portal_admin.scd --

// Permissions:
//  D: Delete
//  U: Update
//  I: Insert
//  S: Select

context database.library.portal.public

set roles table(
    name | level
    admin | 10
)

// Specify what columns may be read, and what where clauses must be used when selecting rows.
set table.books.require table(
    role  | permission | query
    admin | *          |
)
set table.books.columns table(
    role  | column | permission | where
    admim | *      | *          | 
)

set table.genre.require table(
    role  | permission | query
    admin | *          |
)
set table.genre.columns table(
    role  | column | permission | where
    admim | *      | *          | 
)

-- ui.scd --

context ui.library_public

set portal database.library.portal.public

set menu table (
	category | link | display
	File     | open | "Open List"
	"Home"   | home  | "Home"
)

set screen.home table (

)

-- z_queries.scd --


set SimpleSelect query(
	from books b
	from genre g
	and eq(b.published, true)
	select b.id, b.bookname
	select g.name genrename
	// "and eq(b.deleted, false)" is automatically added unless otherwise specified.
)
set SimpleInsert query(
	from books b
	and eq(b.id, 12) // Duplicate this row
	// "and eq(b.deleted, false)" is automatically added unless otherwise specified.
	insert b
	set bookname b.bookname
	set pages b.pages
	set genre @genre // This is an input parameter.
	set published false
)
set SimpleUpdate query(
	from books b
	and eq(b.id, 12) // Update this row
	// "and eq(b.deleted, false)" is automatically added unless otherwise specified.
	update b // or just "update", which would refer to "from books b".
	set pages @pages // Set pages to a new value from an input parameter.
)
set SimpleDelete query(
	from books b
	and eq(b.id, 12) // Delete this row
	// "and eq(b.deleted, false)" is automatically added unless otherwise specified.
	delete b
)

// General pattern for queries will be to name query parts, then reference
// other query query parts from the from clause like any other table.
// This make essetnally is a combination of table variables and CTEs,
// implementations may use neither, either, or both.
//
// Need a simple syntax to assign columns from one query part to
// the input parameters of another referenced query part.

set SelectGenre query(
	from genre g
	and eq(g.id, @genre)
	select g.name genrename
)
set SelectBook query(
	from books b
	from SelectGenre sg
	and eq(b.published, true)
	and eq(b.genre, sg.genre)
	opt eq(b.bookname, @Name) // "opt" is like "and", but is only included if all variables are present.
	select b.id, b.bookname
	select sg.genrename
)
// or
set SelectGenre query(
	from genre g
	and eq(g.id, @genre)
	select g.name genrename
)
set SelectBook query(
	from books b
	and eq(b.published, true)
	and exists ( // Restrict to a sub-query.
		from SelectGenre sg
		and eq(sg.genre, b.genre)
		and eq(sg.genrename, "History")
	)
	select b.id, b.bookname
)

set FullExample query(
	set Query1 query(
		from books b
		and eq(b.published, true)
		select b.id, b.bookname
	)
	set ViewA query(
		from books b
		and eq(b.published, @published)
		select b.genre
	)
	query Query1
	query(
		from genre g
		select g.*
		and exists (
			from ViewA v
			and eq(v.genre, g.id)
			and eq(v.published, 1)
		)
	)
)
