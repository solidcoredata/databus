// This is a testing ground for table definitions.

-- setup.scd --

create database.library

-- db.scd --

context database.library

create portal.public
create portal.admin

create table.books

set table.books.tags array(softdelete, audit)
set table.books.columns table(
    name   | type | default |   key   |  length | fk
    id    |  int  | serial |  key    | -
    name   | text |  -  | -    |   1000
    pages |  int  |  -  | -    |   -
    genre | int | - | - | - | genre.id
    published | bool | false
)

set table.books.indices table (
    name       |    index       |   include | where
    pagelength |   pages, genre | id | deleted == 0
    genre      |    genre       | id | deleted == 0
)

create table.genre

set table.genre.tags array(softdelete, audit)

set tags.softdelete.columns table(
    name | type | default | softdelete
    deleted | bool | false | softdelete
)

set tags.audit.columns table(
    name | type | default
    time_created | datetimez | time.now()
    account_created | int | or(.account, 0)
    time_updated | datetimez | time.now()
    account_updated | int | or(.account, 0)
)

set tags.audit.triggers table(
    name | on | do
    audit_update | update | update; set time_updated = time.now(); set account_updated = or(.account, 0)
)

set tags.audit&softdelete.columns table(
    name | type | default | nullable
    time_deleted | datetimez | - | nullable
    account_deleted | int | - | nullable
)

set tags.audit&softdelete.triggers table(
    name | on | do
    audit_softdelete_delete | delete | update; set deleted = 1; set time_deleted = time.now(); set account_deleted = or(.account, 0)
)

// TODO(daniel.theophanes): Add ability to add history "sub-tables".
// Functionally this would entail a table having a related sub-table.
// This might be in the form of an audit table (showing history and effective date).
// This might be in the form of a view that always takes an effective date, and the sub-table holds the data.

-- portal_public.scd --

// Permissions:
//  D: Delete
//  U: Update
//  I: Insert
//  S: Select

// TODO(daniel.theophanes): determine the best way to inject "deleted == false", unless some role is allowed to and includeds ".show_deleted == true".

context database.library.portal.public

set roles table(
    name | level
    anon | 1
)

// Specify what columns may be read, and what where clauses must be used when selecting rows.
set table.books.require table(
    role | permission | where
    anon | S          | and b.published == true
)

set table.books.columns table(
    role | column | permission | where
    anon | name | S          | 
    anon | pagelength | S    | 
)

set table.genre.require table(
    role | permission | where
    anon | S          | and (from books b; and b.genre == g.id;) // Ensure at least one (published) book has the genre.
)

set table.genre.columns table (
    role | column | permission | where
    anon | name   | S          | 
)
